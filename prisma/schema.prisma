generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  firstName    String
  lastName     String
  answers      Answer[]
  books        Book[]
  progresses   Progress[]
}

model Book {
  id        String    @id @default(uuid())
  userId    String
  title     String
  author    String?
  fileUrl   String?
  status    String    @default("uploaded")
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  chapters  Chapter[]
}

model Chapter {
  id        String    @id @default(uuid())
  bookId    String
  title     String
  order     Int
  pageStart Int
  pageEnd   Int
  createdAt DateTime  @default(now())
  book      Book      @relation(fields: [bookId], references: [id])

  chunks     Chunk[]
  progresses Progress[]
  topics     Topic[]
  questions  Question[] 

  @@index([bookId, order])
}

model Topic {
  id        String   @id @default(uuid())
  chapterId String
  title     String
  order     Int
  pageStart Int?
  pageEnd   Int?

  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  questions Question[]

  @@index([chapterId, order])
}

model Chunk {
  id         String      @id @default(uuid())
  chapterId  String
  idx        Int
  text       String
  tokenCount Int
  embedding  Unsupported("vector")? // nullable, чтобы можно было не считать сразу
  sourceLoc  Json?

  chapter    Chapter     @relation(fields: [chapterId], references: [id])
  questions  Question[]

  @@index([chapterId, idx])
}

model Question {
  id            String   @id @default(uuid())
  chapterId     String
  topicId       String?
  chunkId       String?
  type          String   @default("mcq")
  difficulty    String?
  bloomLevel    String?
  stem          String
  options       String[] // Postgres array
  correctIndex  Int
  explanation   String?
  provenance    Json?
  modelSnapshot String?
  createdAt     DateTime @default(now())

  answers       Answer[]
  chapter       Chapter  @relation(fields: [chapterId], references: [id])
  topic         Topic?   @relation(fields: [topicId], references: [id])
  chunk         Chunk?   @relation(fields: [chunkId], references: [id])

  @@index([chapterId])
  @@index([topicId])
}

model Answer {
  id          String   @id @default(uuid())
  userId      String
  questionId  String
  chosenIndex Int
  isCorrect   Boolean
  timeMs      Int?
  createdAt   DateTime @default(now())

  question    Question @relation(fields: [questionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model Progress {
  userId    String
  chapterId String
  answered  Int     @default(0)
  correct   Int     @default(0)
  pct       Decimal @default(0)

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, chapterId])
  @@index([chapterId])
}

model GenCache {
  id        String   @id @default(uuid())
  key       String   @unique
  payload   String
  tokens    Int
  createdAt DateTime @default(now())
}
