generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  firstName    String
  lastName     String

  books      Book[]
  answers    Answer[]
  progresses Progress[]
}

model Book {
  id        String    @id @default(uuid())
  userId    String
  title     String
  author    String?
  lang      String?
  fileUrl   String?
  status    String    @default("uploaded")
  createdAt DateTime  @default(now())
  chapters  Chapter[]
  user      User      @relation(fields: [userId], references: [id])
}

model Chapter {
  id         String     @id @default(uuid())
  bookId     String
  idx        Int
  title      String
  tokenStart Int?
  tokenEnd   Int?
  createdAt  DateTime   @default(now())
  book       Book       @relation(fields: [bookId], references: [id])
  chunks     Chunk[]
  questions  Question[]
  progresses Progress[]
}

model Chunk {
  id         String                @id @default(uuid())
  chapterId  String
  idx        Int
  text       String
  tokenCount Int
  embedding  Unsupported("vector")
  sourceLoc  Json?
  chapter    Chapter               @relation(fields: [chapterId], references: [id])

  questions Question[]

  @@index([chapterId, idx])
}

model Question {
  id            String   @id @default(uuid())
  chapterId     String
  chunkId       String?
  type          String   @default("mcq")
  difficulty    String?
  bloomLevel    String?
  stem          String
  options       String[]
  correctIndex  Int
  explanation   String?
  provenance    Json?
  modelSnapshot String?
  createdAt     DateTime @default(now())

  chapter Chapter @relation(fields: [chapterId], references: [id])
  chunk   Chunk?  @relation(fields: [chunkId], references: [id])

  answers Answer[]
}

model Answer {
  id          String   @id @default(uuid())
  userId      String
  questionId  String
  chosenIndex Int
  isCorrect   Boolean
  timeMs      Int?
  createdAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@index([userId, createdAt])
}

model Progress {
  userId    String
  chapterId String
  answered  Int     @default(0)
  correct   Int     @default(0)
  pct       Decimal @default(0)

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@id([userId, chapterId])
  @@index([chapterId])
}
